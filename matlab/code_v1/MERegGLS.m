function MERegGLS(data,ME,Vall,bootflag,alpha,reps)% number of tips and variables[n p]=size(data);Y=data(:,1);X=data(:,2:end);MEY=ME(:,1);MEX=ME(:,2:end);CY=Vall(:,:,1);CX=[];for i=2:p	Crow=[];	for j=2:p						CXi=Vall(:,:,i);		CXj=Vall(:,:,j);				if sum(sum((CXi-CXj).^2)) < 10^-8			Crow=[Crow CXi];		else			invCXi=CXi\eye(n);			invCXj=CXj\eye(n);			iDXi=chol(CXi)';			iDXj=chol(CXj)';			CXij=iDXi*iDXj';			Crow=[Crow CXij];		end	end	CX=[CX;Crow];end% function that returns the correlation matrix from the independent% variables into R using pairwise EGLSif p-1>1	R=MECorrForRegGLS(X,MEX,Vall(:,:,2:end));	CX=CX.*kron(R,ones(n,n));else	R=1;end% GLS estimates without measurement errorU1=ones(n,1);aX=[];s2X=[];for i=2:p	invCX=Vall(:,:,i)\eye(n);	a=(U1'*invCX*U1)\(U1'*invCX*X(:,i-1));	aX=[aX;a];	s2X=[s2X; (X(:,i-1)-a)'*invCX*(X(:,i-1)-a)/(n-1)];endU=kron(eye(p-1),ones(n,1));invCX=CX^-1;(U'*invCX*U)\(U'*invCX*X(:));U2=[ones(n,1) X];invCY=CY\eye(n);b=(U2'*invCY*U2)\(U2'*invCY*Y);s2E=(Y-U2*b)'*invCY*(Y-U2*b)/(n-p);sE=s2E^.5;sX=s2X.^.5;est=[b' s2E aX' s2X'];H=(Y-U2*b);lnlike=-.5*log(det(s2E*CY)) - .5*(H'*invCY*H)/s2E - (n/2)*log(2*pi); aXtrue=aX;btrue=b;if bootflag	VX=kron(R.*(sX'*sX),ones(n,n)).*CX;	[TX LX TT]=svd(VX);	DX=TX*LX.^(.5);		VY=s2E*CY;	[TY LY TT]=svd(VY);	DY=TY*LY.^(.5);	bootlist=[];	for t=1:reps		EX=DX*randn(n*(p-1),1);		EY=DY*randn(n,1);					a=ones(n,1)*aXtrue';		rX=a(:)+EX;		nX=rX; %+MEX(:).*randn(n*(p-1),1);			rX=reshape(rX,n,p-1);		nX=reshape(nX,n,p-1);		nY=[ones(n,1) rX]*btrue+EY; %+MEY.*randn(n,1);		% GLS estimates without measurement error		aX=[];		s2X=[];		for i=2:p			invCX=Vall(:,:,i)\eye(n);			a=(U1'*invCX*U1)\(U1'*invCX*nX(:,i-1));			aX=[aX;a];			s2X=[s2X; (nX(:,i-1)-a)'*invCX*(nX(:,i-1)-a)/(n-1)];		end		U2=[ones(n,1) nX];		invCY=CY\eye(n);		b=(U2'*invCY*U2)\(U2'*invCY*nY);		s2E=(nY-U2*b)'*invCY*(nY-U2*b)/(n-p);				bootlist=[bootlist;b' s2E aX' s2X'];	end		% obtain alpha% confidence intervals	[bn, bc]=size(bootlist);	bootconf=[];	for jj=1:bc		d=bootlist(:,jj);		d=sort(d);		m=length(d);		ub=d(ceil((1-.5*alpha)*m));		lb=d(floor(.5*alpha*m));		meand=mean(d);		bootconf=[bootconf; lb meand ub];	endend		% print final valuesif bootflag	fprintf('Coefficients (lb,mean,ub)\n')	fprintf(['b0 (intercept) = ',num2str(est(1)),' (',...		num2str(bootconf(1,1)),', ',num2str(bootconf(1,2)),', ',num2str(bootconf(1,3)),')\n']);	for i=1:p-1		fprintf(['b',num2str(i)',' = ',num2str(est(i+1)),' (',...			num2str(bootconf(i+1,1)),', ',num2str(bootconf(i+1,2)),', ',num2str(bootconf(i+1,3)),')\n']);	end		fprintf(['\nsigma2 = ',num2str(est(p+1)),' (',...		num2str(bootconf(p+1,1)),', ',num2str(bootconf(p+1,2)),', ',num2str(bootconf(p+1,3)),')\n\n']);else	fprintf('Coefficients\n')	fprintf(['b0 (intercept) = ',num2str(est(1)),'\n']);	for i=1:p-1		fprintf(['b',num2str(i)',' = ',num2str(est(i+1)),'\n']);	end		fprintf(['\nsigma2 = ',num2str(est(p+1)),'\n\n']);endfprintf('Independent variable means, variances, and correlations\n')for i=1:p-1	fprintf(['aX',num2str(i)',' = ',num2str(est(p+1+i)),'\n']);endfor i=1:p-1	fprintf(['s2X',num2str(i)',' = ',num2str(est(2*p+i)),'\n']);endfor i=1:p-1	for j=i+1:p-1		fprintf(['r(',num2str(i),',',num2str(j)',') = ',num2str(R(i,j)),'\n']);	endendfprintf(['\nLnLikelihood = ',num2str(lnlike),'\n'])fprintf(['-2LL = ',num2str(-2*lnlike),'\n'])par=p+1;fprintf(['AIC(par=',num2str(par),') = ',num2str(-2*lnlike + 2*par),'\n\n'])