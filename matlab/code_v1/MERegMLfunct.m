% updated 1Jul10function LL=MERegMLfunct(parameters)	global CX CY MX MY nX nY p counter		n=length(nX);	b=parameters(1:p)';		sE=abs(parameters(p+1));	aX=parameters(p+2:2*p)';	s2=parameters(2*p+1:end);	s2X=zeros(p-1,p-1);	ii=1;	for i=1:p-1		for j=i:p-1			s2X(i,j)=s2(ii);			ii=ii+1;		end	end	s2X=s2X+s2X'-diag(diag(s2X));	s2X=s2X^2;	aY=b'*[1;aX];	vX=s2X;	VX=CX.*kron(vX,ones(n,n));	VX=VX+MX;	vXY=vX.*(b(2:end)*ones(1,p-1))';	vXY=CX.*kron(vXY,ones(n,n));	vYY=vX.*(b(2:end)*b(2:end)');	vYY=CX.*kron(vYY,ones(n,n));	VXY=zeros(n*(p-1),n);	VYY=zeros(n,n);	for i=1:p-1		VXY=VXY + vXY(:,n*(i-1)+1:n*i);		for j=1:p-1			VYY=VYY + vYY(n*(i-1)+1:n*i,n*(j-1)+1:n*j);		end	end	VYY=VYY+sE^2*CY+MY;		VV=[VX VXY;VXY' VYY];	invVV=VV\eye(p*n);	%invVV=sparse(VV)\sparse(eye(p*n));	aXv=ones(n,1)*aX';	H=[nX(:)-aXv(:);nY-aY]; 	LL=.5*(log(det(VV)) + H'*invVV*H);		if ~isreal(LL) | isinf(LL)		LL=10^10;	end	%  	counter=counter+1; 	% 	if mod(counter,100)==0% 		[LL parameters]% 	end		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	% this code can be used to write a reduced ML function by solving for	% aX and aY (eliminating aX and b0 from the minimization)			% This is for the case of one independent variable		%Z=kron(eye(2),ones(n,1));		%a=(Z'*invVV*Z)\(Z'*invVV*[nX zeros(n,1);zeros(n,1) nY]);		%aXr=a(1,1);		%aYr=a(2,2);