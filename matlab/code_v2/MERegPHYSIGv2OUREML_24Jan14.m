function [lnlike AIC atrue aSE s2aGLS btrue strue sEtrue dtrue bootconf]=MERegPHYSIGv2OUREML_24Jan14(Y,X,U,MEY,MEX,VY,VX,bootflag,alpha,reps)global CX CY MX MY nX nY nU p q tipsum ib jb mb nb counterglobal col depcol indepcol% number of tips and variables[n p]=size(X);[n q]=size(U);n=length(Y);MY=diag(MEY.^2);MX=diag(MEX(:).^2);CY=VY;CX=[];for i=1:p	Crow=[];	for j=1:p						CXi=VX(:,:,i);		CXj=VX(:,:,j);				if sum(sum((CXi-CXj).^2)) < 10^-8			Crow=[Crow CXi];		else			invCXi=CXi\eye(n);			invCXj=CXj\eye(n);			iDXi=chol(CXi)';			iDXj=chol(CXj)';			CXij=iDXi*iDXj';			Crow=[Crow CXij];		end	end	CX=[CX;Crow];end% GLS estimates without measurement errorW=ones(n,1);aX=[];for i=1:p	invCX=VX(:,:,i)\eye(n);	a=(W'*invCX*W)\(W'*invCX*X(:,i));	aX=[aX;a];ends2X=[];for i=1:p	ss2X=[];	for j=1:p		invCXY=CX(n*(i-1)+1:n*i,n*(j-1)+1:n*j)\eye(n);		ss2X=[ss2X (X(:,i)-aX(i))'*invCXY*(X(:,j)-aX(j))/(n-1)];	end	s2X=[s2X;ss2X];ends2=[];for i=1:p							s2=[s2 s2X(i,i:end)];endif isempty(s2)	s2=0;ends=s2.^.5;W2=[X ones(n,1) U];invCY=CY\eye(n);b=(W2'*invCY*W2)\(W2'*invCY*Y);s2E=(Y-W2*b)'*invCY*(Y-W2*b)/(n-p-q-1);sE=s2E^.5;% REML estimates with measurement errortipsum=diag(CY)*ones(1,length(CY)) + ones(length(CY),1)*diag(CY)'-2*CY;nY=Y;	nX=X;	nU=U;startd=.5;startp=[b(1:p)' sE aX' s startd];[mb,nb]=size(startp);[ib,jb,startp]=find(startp);ii=0;while MERegPHYSIGv2OUREML_24Jan14funct(startp)>=10^10 & ii <50	ii=ii+1;	s2Xtemp=s2X^2;		dsX=diag(diag(s2Xtemp).^-.5);	R=dsX*s2Xtemp*dsX;	R=R.*(.01*ii*eye(p-1)+(1-.01*ii)*ones(p-1,p-1));		dsX=diag(diag(s2Xtemp).^.5);	temps2X=dsX*R*dsX;		temps2X=temps2X^.5;	s2=[];	for i=1:p-1		s2=[s2 temps2X(i,i:end)];	end	startp=[b(1:p)' sE/mean(MY) aX' s startd];		[mb,nb]=size(startp);	[ib,jb,startp]=find(startp);endcounter=0;annealingopts=struct('StopTemp',10^-4,'Verbosity',0);fhandle=@MERegPHYSIGv2OUREML_24Jan14funct;[startpAnneal LL]=anneal(fhandle,startp,annealingopts);[startpAnneal LL]=anneal(fhandle,startpAnneal,annealingopts);options=optimset('tolX',10^-6,'tolFun',10^-10,'MaxFunEvals',10^4,'MaxIter',10^4);[est LL]=fminsearch(fhandle,startpAnneal,options);[est LL]=fminsearch(fhandle,est,options);est=full(sparse(ib,jb,est,mb,nb));b=est(1:p)';	sE=abs(est(p+1));s=abs(est(p+2:end-1));d=abs(est(end));CYd=real(d.^tipsum.*(1-d.^(2*CY))/(1-d^2));% extract coveraince matrices and fixed parametersif p==0	% no random independent variables	VYY=sE^2*CYd+MY;	VV=VYY;else	% random independent variables present	sX=zeros(p,p);	ii=1;	for i=1:p		for j=i:p			sX(i,j)=s(ii);			ii=ii+1;		end	end	sX=sX+sX'-diag(diag(sX));	s2X=sX^2;	vX=s2X;	VX=CX.*kron(vX,ones(n,n));	VX=VX+MX;	vXY=vX.*(b*ones(1,p))';	vXY=CX.*kron(vXY,ones(n,n));	vYY=vX.*(b*b');	vYY=CX.*kron(vYY,ones(n,n));	VXY=zeros(n*p,n);	VYY=zeros(n,n);	for i=1:p		VXY=VXY + vXY(:,n*(i-1)+1:n*i);		for j=1:p			VYY=VYY + vYY(n*(i-1)+1:n*i,n*(j-1)+1:n*j);		end	end	VYY=VYY+sE^2*CYd+MY;	VV=[VX VXY;VXY' VYY];endinvVV=VV\eye((p+1)*n);Z=kron(eye(1+p),ones(n,1));Z=[Z [zeros(n*p,q);nU]];w=kron(eye(q+1+p),[nX nY]);W=[nX(:);nY];a=(Z'*invVV*Z)\(Z'*invVV*W);% GLS standard errors for fixed effectsMSE=(W-Z*a)'*invVV*(W-Z*a)/(n-p-q-1);s2aGLS=MSE*(Z'*invVV*Z)^-1;aSE=diag(s2aGLS).^.5;aX=a(1:p);aY=a(p+1);aU=a(p+2:end);atrue=a;btrue=b;strue=s';sEtrue=sE;dtrue=d;lnlike=-LL - (p*n-(q+1))*log(2*pi)/2 + log(n^p)/2;par=length(est);AIC=-2*lnlike + 2*par;% if dtrue<.01% 	bootflag=0;% endif ~bootflag	bootconf=[];endif bootflag		startboot=est;	if startboot(end)<.1		startboot(end)=.1;	end	if p>=1		% produce R		sX=diag(s2X).^.5;		ds2X=diag(diag(s2X).^(-.5));		R=ds2X*s2X*ds2X;		VX=kron(R.*(sX'*sX),ones(n,n)).*CX;		[TX LX TT]=svd(VX);		DX=TX*LX.^(.5);	end		VY=s2E*CYd;	[TY LY TT]=svd(VY);	DY=TY*LY.^(.5);	bootlist=[];	bootlistLL=[];	for t=1:reps				if p==0			EY=DY*randn(n,1);			nY=[ones(n,1) nU]*atrue+EY+MEY.*randn(n,1);		else			EX=DX*randn(n*p,1);			EY=DY*randn(n,1);			mX=ones(n,1)*atrue(1:p)';			rX=mX(:)+EX;			nX=rX+MEX(:).*randn(n*p,1);				rX=reshape(rX,n,p);			nX=reshape(nX,n,p);			nY=rX*btrue+[ones(n,1) U]*atrue(p+1:end)+EY+MEY.*randn(n,1);		end		[ib,jb,startpboot]=find(startboot); 		annealingopts=struct('StopTemp',10^-3,'Verbosity',0);		[startpAnneal LL]=anneal(fhandle,startpboot,annealingopts);		startpboot=startpAnneal;		options=optimset('tolX',10^-6,'tolFun',10^-10,'MaxFunEvals',10^4,'MaxIter',10^4); 		[estboot LL]=fminsearch(fhandle,startpboot,options);				estboot=full(sparse(ib,jb,estboot,mb,nb));		b=estboot(1:p)';			sE=abs(estboot(p+1));		s=estboot(p+2:end-1);		d=abs(estboot(end));		bootCYd=real(d.^tipsum.*(1-d.^(2*CY))/(1-d^2));				% extract covariance matrices and fixed parameters		if p==0			% no random independent variables			VYY=sE^2*CYd+MY;			VV=VYY;		else			% random independent variables present			sX=zeros(p,p);			ii=1;			for i=1:p				for j=i:p					sX(i,j)=s(ii);					ii=ii+1;				end			end			sX=sX+sX'-diag(diag(sX));			s2X=sX^2;			vX=s2X;			VX=CX.*kron(vX,ones(n,n));			VX=VX+MX;			vXY=vX.*(b*ones(1,p))';			vXY=CX.*kron(vXY,ones(n,n));			vYY=vX.*(b*b');			vYY=CX.*kron(vYY,ones(n,n));			VXY=zeros(n*p,n);			VYY=zeros(n,n);			for i=1:p				VXY=VXY + vXY(:,n*(i-1)+1:n*i);				for j=1:p					VYY=VYY + vYY(n*(i-1)+1:n*i,n*(j-1)+1:n*j);				end			end			VYY=VYY+sE^2*CYd+MY;			VV=[VX VXY;VXY' VYY];		end		invVV=VV\eye((p+1)*n);		Z=kron(eye(1+p),ones(n,1));		Z=[Z [zeros(n*p,q);nU]];		w=kron(eye(q+1+p),[nX nY]);		W=[nX(:);nY];		a=(Z'*invVV*Z)\(Z'*invVV*W);						bootlist=[bootlist;a' b' s sE d];		bootlistLL=[bootlistLL;a' b' s sE d LL];		%		[t LL bootlist(t,:)]	end	% 	filename=['bootstrap_col_standardized_',num2str(col)];% 	save(filename,'bootlistLL','-ascii')	 	filename=['bootstrap_standardized_depcol_',num2str(depcol),'_indepcol_',num2str(indepcol)]; 	save(filename,'bootlistLL','-ascii')		figure(10*depcol+indepcol)	hist(bootlist(:,3))	hold on	plot([btrue btrue],[0 100],'r')	hold off	% obtain alpha% confidence intervals	[bn, bc]=size(bootlist);	bootconf=[];	for jj=1:bc		w=bootlist(:,jj);		w=sort(w);		m=length(w);		ub=w(ceil((1-.5*alpha)*m));		lb=w(floor(.5*alpha*m));		meanw=mean(w);		bootconf=[bootconf; lb meanw ub];	endend